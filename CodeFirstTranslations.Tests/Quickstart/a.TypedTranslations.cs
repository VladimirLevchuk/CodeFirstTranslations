using FluentAssertions;
using NUnit.Framework;

namespace CodeFirstTranslations.Tests.Quickstart
{
    public class TypedTranslations : TestBase
    {
        public class Translations
        {
            /// <summary>
            /// Translation with key/value. 
            /// Can be a field, no need in expression syntax 
            /// </summary>
            public static Translation Hello = new TranslationField("Hello", key: "/messages/hello");
            /// <summary>
            /// Translation with auto-generated key. 
            /// NOTE: it's important to register translations class to TranslationClasses.Add in order to use auto-generated keys
            /// </summary>
            public static Translation Bye = new TranslationProperty("Bye!");
            /// <summary>
            /// Or you'll have to provide some extra information
            /// </summary>
            public static Translation Ok = new TranslationField(nameof(Ok), "OK");
            /// <summary>
            /// Translation with format
            /// </summary>
            public static TranslationFormat1Field Greeting = new TranslationFormat1Field("Hello, {0}!", "/messages/greeting");
            /// <summary>
            /// Translation with multiple keys (usually needed when we want to use our translation for a 3rd-party library)
            /// </summary>
            public static Translation LoginRequired = new TranslationField("Login required!",
                // our key will be used to generate translation message in our code
                key: "/errors/loginRequired",
                // and using alternative keys we'll provide code-first translations for 3rd-parties
                alternativeKeys: new[]          
                {
                    "/library1/errors/loginRequired",
                    "/library2/errors/enterLogin"
                });
            /// <summary>
            /// Same as above, but with auto-generated key
            /// </summary>
            public static Translation NameInUse => new TranslationProperty("The name you entered is already in use, please choose a different name",
                alternativeKeys: new[]
                {
                    "/library1/errors/userAlreadyExists",
                    "/library2/errors/duplicateUser"
                });
        }

        [Test]
        public void Translation_With_Key()
        {
            Translations.Hello.Value.Should().Be("Hello");
            Translations.Hello.Key.Should().Be("/messages/hello");
        }

        [Test]
        public void Translation_Format()
        {
            Translations.Greeting.Format("world").Should().Be("Hello, world!");
            Translations.Greeting.Key.Should().Be("/messages/greeting");
        }

        [Test]
        public void Translation_With_Auto_Generated_Key()
        {
            // Key auto-generation requires us to register our translation class before using
            TranslationsEnvironment.TranslationClasses.Add<Translations>();

            Translations.Bye.Value.Should().Be("Bye!");
            Translations.Bye.Key.Should().Be("/translations/bye");
        }

        [Test]
        public void Alternative_Keys()
        {
            Translations.LoginRequired.Value.Should().Be("Login required!");
            Translations.LoginRequired.Key.Should().Be("/errors/loginrequired");
            Translations.LoginRequired.AlternativeKeys.Should().BeEquivalentTo(
                "/library1/errors/loginrequired", "/library2/errors/enterlogin");
        }

        [Test]
        public void Alternative_Keys_With_Autogenerated_Key()
        {
            TranslationsEnvironment.TranslationClasses.Add<Translations>();

            Translations.NameInUse.Value.Should().Be("The name you entered is already in use, please choose a different name");
            Translations.NameInUse.Key.Should().Be("/translations/nameinuse");
            Translations.NameInUse.AlternativeKeys.Should().BeEquivalentTo(
                "/library1/errors/useralreadyexists", "/library2/errors/duplicateuser");
        }
    }
}